/**
 * Ansible Configuration Generator
 * Generates Ansible inventories and playbooks from Proxmox infrastructure
 */

import * as fs from 'fs/promises';
import * as path from 'path';
import * as yaml from 'js-yaml';
import { ProjectWorkspace } from '../workspace';
import { VMInfo, ContainerInfo } from '../types';

export class AnsibleGenerator {
  private workspace: ProjectWorkspace;

  constructor(workspace: ProjectWorkspace) {
    this.workspace = workspace;
  }

  /**
   * Generate dynamic Ansible inventory from VMs and containers
   */
  async generateInventory(vms: VMInfo[], containers: ContainerInfo[]): Promise<void> {
    const inventory = {
      all: {
        vars: {
          ansible_user: 'root',
          ansible_ssh_common_args: '-o StrictHostKeyChecking=no',
          ansible_python_interpreter: '/usr/bin/python3',
        },
        children: {
          proxmox_nodes: {
            hosts: {
              [this.workspace.config.node]: {
                ansible_host: this.workspace.config.host,
                ansible_connection: 'ssh',
              }
            }
          },
          vms: {
            hosts: {} as Record<string, any>,
            vars: {
              resource_type: 'qemu',
              ansible_connection: 'ssh',
            }
          },
          containers: {
            hosts: {} as Record<string, any>,
            vars: {
              resource_type: 'lxc',
              ansible_connection: 'ssh',
            }
          },
          running: {
            hosts: {} as Record<string, any>,
            vars: {
              status: 'running',
            }
          },
          stopped: {
            hosts: {} as Record<string, any>,
            vars: {
              status: 'stopped',
            }
          }
        }
      }
    };

    // Add VMs to inventory
    for (const vm of vms) {
      const hostName = vm.name || `vm-${vm.vmid}`;
      const hostConfig = {
        vmid: vm.vmid,
        proxmox_node: vm.node,
        status: vm.status,
        cores: vm.cpus,
        memory_mb: vm.maxmem ? Math.floor(vm.maxmem / 1024 / 1024) : null,
        disk_gb: vm.maxdisk ? Math.floor(vm.maxdisk / 1024 / 1024 / 1024) : null,
        // ansible_host would be set when we know the IP
        // ansible_host: 'IP_ADDRESS_HERE',
      };

      inventory.all.children.vms.hosts[hostName] = hostConfig;
      
      // Add to status-based groups
      if (vm.status === 'running') {
        inventory.all.children.running.hosts[hostName] = hostConfig;
      } else {
        inventory.all.children.stopped.hosts[hostName] = hostConfig;
      }
    }

    // Add containers to inventory
    for (const container of containers) {
      const hostName = container.name || `ct-${container.vmid}`;
      const hostConfig = {
        vmid: container.vmid,
        proxmox_node: container.node,
        status: container.status,
        cores: container.cpus,
        memory_mb: container.maxmem ? Math.floor(container.maxmem / 1024 / 1024) : null,
        disk_gb: container.maxdisk ? Math.floor(container.maxdisk / 1024 / 1024 / 1024) : null,
        // ansible_host would be set when we know the IP
        // ansible_host: 'IP_ADDRESS_HERE',
      };

      inventory.all.children.containers.hosts[hostName] = hostConfig;
      
      // Add to status-based groups
      if (container.status === 'running') {
        inventory.all.children.running.hosts[hostName] = hostConfig;
      } else {
        inventory.all.children.stopped.hosts[hostName] = hostConfig;
      }
    }

    // Write inventory file
    const inventoryPath = path.join(this.workspace.rootPath, 'ansible', 'inventory.yml');
    const yamlContent = yaml.dump(inventory, { 
      indent: 2, 
      lineWidth: -1,
      noRefs: true,
      sortKeys: false
    });

    await fs.writeFile(inventoryPath, `# Ansible Inventory
# Generated by Proxmox-MPC from existing infrastructure
# Last updated: ${new Date().toISOString()}
#
# Usage:
#   ansible-playbook -i inventory.yml playbooks/site.yml
#   ansible all -i inventory.yml -m ping

${yamlContent}`);
  }

  /**
   * Generate basic Ansible playbooks
   */
  async generatePlaybooks(vms: VMInfo[], containers: ContainerInfo[]): Promise<void> {
    // Main site playbook
    const sitePlaybook = [
      {
        name: 'Proxmox Infrastructure Management',
        hosts: 'all',
        gather_facts: true,
        become: true,
        vars: {
          project_name: this.workspace.name,
          generated_by: 'proxmox-mpc',
          timestamp: new Date().toISOString(),
        },
        tasks: [
          {
            name: 'Display host information',
            debug: {
              msg: [
                'Host: {{ inventory_hostname }}',
                'VMID: {{ vmid | default("N/A") }}',
                'Status: {{ status | default("unknown") }}',
                'Resource Type: {{ resource_type | default("unknown") }}',
                'Node: {{ proxmox_node | default("unknown") }}'
              ]
            }
          },
          {
            name: 'Ensure system is up to date (VMs only)',
            apt: {
              update_cache: true,
              upgrade: 'dist'
            },
            when: 'resource_type == "qemu" and status == "running"'
          },
          {
            name: 'Install common packages',
            apt: {
              name: [
                'curl',
                'wget',
                'htop',
                'vim',
                'git'
              ],
              state: 'present'
            },
            when: 'status == "running"'
          }
        ]
      }
    ];

    // Write site playbook
    const playbooksDir = path.join(this.workspace.rootPath, 'ansible', 'playbooks');
    await fs.mkdir(playbooksDir, { recursive: true });
    
    const sitePlaybookPath = path.join(playbooksDir, 'site.yml');
    const siteYaml = yaml.dump(sitePlaybook, { 
      indent: 2, 
      lineWidth: -1,
      noRefs: true 
    });

    await fs.writeFile(sitePlaybookPath, `# Main Site Playbook
# Generated by Proxmox-MPC
# Last updated: ${new Date().toISOString()}
#
# Usage:
#   ansible-playbook -i ../inventory.yml site.yml
#   ansible-playbook -i ../inventory.yml site.yml --limit running

${siteYaml}`);

    // Generate VM-specific playbook
    if (vms.length > 0) {
      await this.generateVMPlaybook(vms);
    }

    // Generate container-specific playbook
    if (containers.length > 0) {
      await this.generateContainerPlaybook(containers);
    }

    // Generate maintenance playbook
    await this.generateMaintenancePlaybook();
  }

  /**
   * Generate VM-specific playbook
   */
  private async generateVMPlaybook(vms: VMInfo[]): Promise<void> {
    const vmPlaybook = [
      {
        name: 'VM Configuration Management',
        hosts: 'vms',
        gather_facts: true,
        become: true,
        vars: {
          vm_config: {
            timezone: 'UTC',
            locale: 'en_US.UTF-8',
          }
        },
        tasks: [
          {
            name: 'Configure timezone',
            timezone: {
              name: '{{ vm_config.timezone }}'
            }
          },
          {
            name: 'Install VM-specific packages',
            apt: {
              name: [
                'qemu-guest-agent',
                'cloud-init',
                'openssh-server'
              ],
              state: 'present'
            }
          },
          {
            name: 'Ensure qemu-guest-agent is running',
            systemd: {
              name: 'qemu-guest-agent',
              state: 'started',
              enabled: true
            }
          }
        ]
      }
    ];

    const vmPlaybookPath = path.join(this.workspace.rootPath, 'ansible', 'playbooks', 'vms.yml');
    const vmYaml = yaml.dump(vmPlaybook, { 
      indent: 2, 
      lineWidth: -1,
      noRefs: true 
    });

    await fs.writeFile(vmPlaybookPath, `# VM Configuration Playbook
# Generated by Proxmox-MPC
# Configures QEMU virtual machines

${vmYaml}`);
  }

  /**
   * Generate container-specific playbook
   */
  private async generateContainerPlaybook(containers: ContainerInfo[]): Promise<void> {
    const containerPlaybook = [
      {
        name: 'Container Configuration Management',
        hosts: 'containers',
        gather_facts: true,
        become: true,
        vars: {
          container_config: {
            timezone: 'UTC',
            locale: 'en_US.UTF-8',
          }
        },
        tasks: [
          {
            name: 'Configure timezone',
            timezone: {
              name: '{{ container_config.timezone }}'
            }
          },
          {
            name: 'Install container-specific packages',
            apt: {
              name: [
                'openssh-server',
                'rsyslog'
              ],
              state: 'present'
            }
          },
          {
            name: 'Ensure SSH is running',
            systemd: {
              name: 'ssh',
              state: 'started',
              enabled: true
            }
          }
        ]
      }
    ];

    const containerPlaybookPath = path.join(this.workspace.rootPath, 'ansible', 'playbooks', 'containers.yml');
    const containerYaml = yaml.dump(containerPlaybook, { 
      indent: 2, 
      lineWidth: -1,
      noRefs: true 
    });

    await fs.writeFile(containerPlaybookPath, `# Container Configuration Playbook
# Generated by Proxmox-MPC
# Configures LXC containers

${containerYaml}`);
  }

  /**
   * Generate maintenance playbook
   */
  private async generateMaintenancePlaybook(): Promise<void> {
    const maintenancePlaybook = [
      {
        name: 'Infrastructure Maintenance',
        hosts: 'running',
        gather_facts: true,
        become: true,
        tasks: [
          {
            name: 'Update package cache',
            apt: {
              update_cache: true,
              cache_valid_time: 3600
            }
          },
          {
            name: 'Check for available updates',
            shell: 'apt list --upgradable',
            register: 'available_updates',
            changed_when: false
          },
          {
            name: 'Display available updates',
            debug: {
              var: 'available_updates.stdout_lines'
            }
          },
          {
            name: 'Clean package cache',
            apt: {
              autoclean: true,
              autoremove: true
            }
          },
          {
            name: 'Check disk usage',
            shell: 'df -h /',
            register: 'disk_usage',
            changed_when: false
          },
          {
            name: 'Display disk usage',
            debug: {
              var: 'disk_usage.stdout_lines'
            }
          }
        ]
      }
    ];

    const maintenancePlaybookPath = path.join(this.workspace.rootPath, 'ansible', 'playbooks', 'maintenance.yml');
    const maintenanceYaml = yaml.dump(maintenancePlaybook, { 
      indent: 2, 
      lineWidth: -1,
      noRefs: true 
    });

    await fs.writeFile(maintenancePlaybookPath, `# Infrastructure Maintenance Playbook
# Generated by Proxmox-MPC
# Performs routine maintenance tasks

${maintenanceYaml}`);
  }
}