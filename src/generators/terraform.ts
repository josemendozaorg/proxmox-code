/**
 * Terraform Configuration Generator
 * Generates Terraform HCL configurations from Proxmox infrastructure
 */

import * as fs from 'fs/promises';
import * as path from 'path';
import { ProjectWorkspace } from '../workspace';
import { VMInfo, ContainerInfo } from '../types';

export class TerraformGenerator {
  private workspace: ProjectWorkspace;

  constructor(workspace: ProjectWorkspace) {
    this.workspace = workspace;
  }

  /**
   * Generate Terraform configuration for a VM
   */
  async generateVMResource(vm: VMInfo): Promise<void> {
    const resourceName = this.sanitizeResourceName(vm.name || `vm-${vm.vmid}`);
    
    const config = `# VM: ${vm.name || vm.vmid} (ID: ${vm.vmid})
# Generated by Proxmox-MPC from existing infrastructure

resource "proxmox_vm_qemu" "${resourceName}" {
  name        = "${vm.name || `vm-${vm.vmid}`}"
  target_node = var.default_node
  vmid        = ${vm.vmid}
  
  # VM Configuration
  cores       = ${vm.cpus || 1}
  memory      = ${vm.maxmem ? Math.floor(vm.maxmem / 1024 / 1024) : 1024}
  
  # Template and OS
  clone       = "ubuntu-cloud"  # TODO: Detect actual template
  full_clone  = true
  
  # Boot and BIOS
  bios        = "ovmf"
  boot        = "order=scsi0"
  
  # Agent and Features
  agent       = 1
  
  # Network Configuration
  network {
    model  = "virtio"
    bridge = "vmbr0"
  }
  
  # Disk Configuration
  disk {
    type    = "scsi"
    storage = "local-lvm"
    size    = "${vm.maxdisk ? Math.floor(vm.maxdisk / 1024 / 1024 / 1024) : 20}G"
    cache   = "writethrough"
  }
  
  # Lifecycle
  lifecycle {
    ignore_changes = [
      clone,
      full_clone,
      disk,
      network,
    ]
  }
  
  # Tags
  tags = "proxmox-mpc,imported,${vm.status}"
}

# Output VM information
output "${resourceName}_info" {
  description = "Information about VM ${vm.name || vm.vmid}"
  value = {
    name      = proxmox_vm_qemu.${resourceName}.name
    vmid      = proxmox_vm_qemu.${resourceName}.vmid
    node      = proxmox_vm_qemu.${resourceName}.target_node
    cores     = proxmox_vm_qemu.${resourceName}.cores
    memory    = proxmox_vm_qemu.${resourceName}.memory
  }
}
`;

    // Write to terraform/vms/ directory
    const vmDir = path.join(this.workspace.rootPath, 'terraform', 'vms');
    await fs.mkdir(vmDir, { recursive: true });
    
    const filePath = path.join(vmDir, `${resourceName}.tf`);
    await fs.writeFile(filePath, config);
  }

  /**
   * Generate Terraform configuration for a container
   */
  async generateContainerResource(container: ContainerInfo): Promise<void> {
    const resourceName = this.sanitizeResourceName(container.name || `ct-${container.vmid}`);
    
    const config = `# Container: ${container.name || container.vmid} (ID: ${container.vmid})
# Generated by Proxmox-MPC from existing infrastructure

resource "proxmox_lxc" "${resourceName}" {
  hostname     = "${container.name || `ct-${container.vmid}`}"
  target_node  = var.default_node
  vmid         = ${container.vmid}
  
  # Container Configuration  
  cores        = ${container.cpus || 1}
  memory       = ${container.maxmem ? Math.floor(container.maxmem / 1024 / 1024) : 512}
  swap         = ${container.maxswap ? Math.floor(container.maxswap / 1024 / 1024) : 512}
  
  # Template and Distribution
  ostemplate   = "local:vztmpl/ubuntu-22.04-standard_22.04-1_amd64.tar.zst"  # TODO: Detect actual template
  unprivileged = true
  
  # SSH and Access
  ssh_public_keys = file("~/.ssh/id_rsa.pub")  # TODO: Make configurable
  
  # Network Configuration
  network {
    name     = "eth0"
    bridge   = "vmbr0"
    ip       = "dhcp"
    firewall = false
  }
  
  # Root Filesystem
  rootfs {
    storage = "local-lvm"
    size    = "${container.maxdisk ? Math.floor(container.maxdisk / 1024 / 1024 / 1024) : 8}G"
  }
  
  # Features
  features {
    nesting = true
    fuse    = true
  }
  
  # Lifecycle
  lifecycle {
    ignore_changes = [
      ostemplate,
      ssh_public_keys,
      network,
      rootfs,
    ]
  }
  
  # Tags
  tags = "proxmox-mpc,imported,${container.status}"
}

# Output container information
output "${resourceName}_info" {
  description = "Information about container ${container.name || container.vmid}"
  value = {
    hostname  = proxmox_lxc.${resourceName}.hostname
    vmid      = proxmox_lxc.${resourceName}.vmid
    node      = proxmox_lxc.${resourceName}.target_node
    cores     = proxmox_lxc.${resourceName}.cores
    memory    = proxmox_lxc.${resourceName}.memory
  }
}
`;

    // Write to terraform/containers/ directory
    const containerDir = path.join(this.workspace.rootPath, 'terraform', 'containers');
    await fs.mkdir(containerDir, { recursive: true });
    
    const filePath = path.join(containerDir, `${resourceName}.tf`);
    await fs.writeFile(filePath, config);
  }

  /**
   * Generate main Terraform provider configuration
   */
  async generateProviderConfig(): Promise<void> {
    const config = `# Proxmox Infrastructure Configuration
# Generated by Proxmox-MPC
# Last updated: ${new Date().toISOString()}

terraform {
  required_version = ">= 1.0"
  
  required_providers {
    proxmox = {
      source  = "telmate/proxmox"
      version = "~> 2.9"
    }
  }
}

# Proxmox Provider Configuration
provider "proxmox" {
  pm_api_url          = "https://${this.workspace.config.host}:${this.workspace.config.port}/api2/json"
  pm_api_token_id     = var.proxmox_token_id
  pm_api_token_secret = var.proxmox_token_secret
  pm_tls_insecure     = ${!this.workspace.config.rejectUnauthorized}
}

# Variables
variable "proxmox_token_id" {
  description = "Proxmox API Token ID"
  type        = string
  sensitive   = true
  default     = "${this.workspace.config.tokenId}"
}

variable "proxmox_token_secret" {
  description = "Proxmox API Token Secret"  
  type        = string
  sensitive   = true
  default     = "${this.workspace.config.tokenSecret}"
}

variable "default_node" {
  description = "Default Proxmox node for resources"
  type        = string
  default     = "${this.workspace.config.node}"
}

# Data sources
data "proxmox_nodes" "available" {}

# Local values
locals {
  timestamp = "${new Date().toISOString()}"
  project   = "${this.workspace.name}"
}

# Outputs
output "project_info" {
  description = "Project information"
  value = {
    name      = local.project
    timestamp = local.timestamp
    server    = "${this.workspace.config.host}:${this.workspace.config.port}"
    node      = var.default_node
  }
}
`;

    const mainPath = path.join(this.workspace.rootPath, 'terraform', 'main.tf');
    await fs.writeFile(mainPath, config);
  }

  /**
   * Sanitize names for Terraform resource names
   */
  private sanitizeResourceName(name: string): string {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9_]/g, '_')
      .replace(/^([0-9])/, '_$1')
      .replace(/_+/g, '_')
      .replace(/^_|_$/g, '');
  }
}