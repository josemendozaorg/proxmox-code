# Docker Compose configuration for Proxmox-MPC Web Dashboard
# Production-ready setup with PostgreSQL, Redis, and monitoring

version: '3.8'

services:
  # Main web application
  proxmox-web:
    build:
      context: .
      dockerfile: Dockerfile.web
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - DATABASE_URL=postgresql://proxmoxuser:${DB_PASSWORD:-proxmoxpass}@postgres:5432/proxmoxmpc
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-change-this-in-production}
      - SESSION_SECRET=${SESSION_SECRET:-change-this-in-production}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PROXMOX_HOST=${PROXMOX_HOST:-}
      - PROXMOX_TOKEN=${PROXMOX_TOKEN:-}
    volumes:
      - ./data/workspaces:/app/workspaces
      - ./data/logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - proxmox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=proxmoxmpc
      - POSTGRES_USER=proxmoxuser
      - POSTGRES_PASSWORD=${DB_PASSWORD:-proxmoxpass}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - proxmox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U proxmoxuser -d proxmoxmpc"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass}
    volumes:
      - redis_data:/data
    networks:
      - proxmox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/ssl:/etc/nginx/ssl
      - ./data/logs/nginx:/var/log/nginx
    depends_on:
      - proxmox-web
    networks:
      - proxmox-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - proxmox-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - proxmox-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  proxmox-network:
    driver: bridge