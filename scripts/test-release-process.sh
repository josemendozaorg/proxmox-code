#!/bin/bash

# Release Process Testing Script for Proxmox-MPC
# Tests the complete release workflow without publishing

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
log() {
    echo -e "${BLUE}[TEST]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

success() {
    echo -e "${GREEN}[PASS]${NC} $1"
}

cleanup() {
    log "Cleaning up test artifacts..."
    
    # Restore original files
    [[ -f package.json.bak ]] && mv package.json.bak package.json
    [[ -f CHANGELOG.md.bak ]] && mv CHANGELOG.md.bak CHANGELOG.md
    
    # Remove test files
    rm -f proxmox-mpc-*.tgz
    rm -f release-test-output.log
    
    # Reset git changes
    git checkout -- package.json CHANGELOG.md 2>/dev/null || true
    
    log "Cleanup completed"
}

# Trap cleanup on exit
trap cleanup EXIT

log "Starting release process testing..."

# Check prerequisites
log "Checking prerequisites..."

# Check if we're in the right directory
[[ -f package.json ]] || error "package.json not found. Run from project root."
[[ -f mkdocs.yml ]] || error "mkdocs.yml not found. Run from project root."

# Check git status
if [[ $(git status --porcelain) ]]; then
    warn "Working directory has uncommitted changes"
    read -p "Continue testing? (y/N): " -n 1 -r
    echo
    [[ $REPLY =~ ^[Yy]$ ]] || exit 1
fi

# Check required tools
command -v npm >/dev/null 2>&1 || error "npm not found"
command -v git >/dev/null 2>&1 || error "git not found"
command -v standard-version >/dev/null 2>&1 || error "standard-version not found. Run: npm install"

success "Prerequisites check passed"

# Test 1: Package Configuration Validation
log "Test 1: Package configuration validation"

# Backup original files
cp package.json package.json.bak
cp CHANGELOG.md CHANGELOG.md.bak

# Validate package.json
PACKAGE_NAME=$(node -p "require('./package.json').name")
PACKAGE_VERSION=$(node -p "require('./package.json').version")
PACKAGE_DESC=$(node -p "require('./package.json').description")

[[ "$PACKAGE_NAME" == "proxmox-mpc" ]] || error "Invalid package name: $PACKAGE_NAME"
[[ -n "$PACKAGE_VERSION" ]] || error "Package version is empty"
[[ -n "$PACKAGE_DESC" ]] || error "Package description is empty"

# Check semantic version format
echo "$PACKAGE_VERSION" | grep -E '^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$' >/dev/null || error "Invalid version format: $PACKAGE_VERSION"

success "Package configuration is valid"

# Test 2: Version Bumping
log "Test 2: Version bumping"

ORIGINAL_VERSION="$PACKAGE_VERSION"

# Test patch version bump
npm run version:patch >/dev/null 2>&1
NEW_VERSION=$(node -p "require('./package.json').version")
[[ "$NEW_VERSION" != "$ORIGINAL_VERSION" ]] || error "Version was not bumped"

log "Version bumped: $ORIGINAL_VERSION â†’ $NEW_VERSION"
success "Version bumping works"

# Test 3: Changelog Generation
log "Test 3: Changelog generation"

# Create a test commit to generate changelog entry
git add .
git commit -m "feat: test feature for release testing" >/dev/null 2>&1 || true

# Generate changelog
npm run changelog >/dev/null 2>&1

# Check if changelog was updated
[[ -f CHANGELOG.md ]] || error "CHANGELOG.md not found"
grep -q "test feature for release testing" CHANGELOG.md || warn "Test commit not found in changelog (expected for existing repo)"

success "Changelog generation works"

# Test 4: Build Process
log "Test 4: Build process"

npm run build >/dev/null 2>&1

# Check build artifacts
[[ -d dist ]] || error "dist directory not created"
[[ -f dist/index.js ]] || error "dist/index.js not found"
[[ -f dist/index.d.ts ]] || error "dist/index.d.ts not found"

success "Build process works"

# Test 5: Package Creation
log "Test 5: Package creation"

npm pack >/dev/null 2>&1

TARBALL=$(ls proxmox-mpc-*.tgz | head -n1)
[[ -f "$TARBALL" ]] || error "Package tarball not created"

# Check package contents
tar -tzf "$TARBALL" | grep -q "package/dist/index.js" || error "dist/index.js not in package"
tar -tzf "$TARBALL" | grep -q "package/package.json" || error "package.json not in package"
tar -tzf "$TARBALL" | grep -q "package/README.md" || error "README.md not in package"

success "Package creation works"

# Test 6: CLI Installation Test
log "Test 6: CLI installation test"

# Install globally
npm install -g "./$TARBALL" >/dev/null 2>&1

# Test CLI
if command -v proxmox-mpc >/dev/null 2>&1; then
    CLI_VERSION=$(proxmox-mpc --version 2>/dev/null || echo "unknown")
    log "CLI version: $CLI_VERSION"
    success "CLI installation works"
else
    error "CLI command not found after installation"
fi

# Uninstall
npm uninstall -g proxmox-mpc >/dev/null 2>&1

# Test 7: Release Workflow (Dry Run)
log "Test 7: Release workflow (dry run)"

# Reset for clean release test
git checkout -- package.json CHANGELOG.md 2>/dev/null || true

# Test standard-version dry run
standard-version --dry-run > release-test-output.log 2>&1

# Check if dry run would work
grep -q "bumping version" release-test-output.log || warn "No version bump detected (expected for clean repo)"

success "Release workflow dry run works"

# Test 8: Git Workflow Validation
log "Test 8: Git workflow validation"

# Check if we can create tags (without actually creating them)
git tag --list | head -n1 >/dev/null # Just test git tag command works

# Check if commit message format is valid
LAST_COMMIT=$(git log -1 --pretty=format:"%s")
log "Last commit: $LAST_COMMIT"

# Note: We don't validate the commit format strictly as this might be run on existing repos
success "Git workflow validation passed"

# Test 9: Documentation Build
log "Test 9: Documentation build"

if command -v mkdocs >/dev/null 2>&1; then
    mkdocs build --strict >/dev/null 2>&1
    [[ -d site ]] || error "Documentation site not built"
    [[ -f site/index.html ]] || error "site/index.html not found"
    success "Documentation build works"
else
    warn "mkdocs not found, skipping documentation test"
fi

# Test 10: Quality Checks
log "Test 10: Quality checks"

# Linting
npm run lint >/dev/null 2>&1 || warn "Linting issues found (non-blocking)"

# Type checking
npm run typecheck >/dev/null 2>&1 || warn "Type checking issues found (non-blocking)"

# Tests
npm test >/dev/null 2>&1 || warn "Test failures found (non-blocking)"

success "Quality checks completed"

# Final Summary
log "======================================="
log "Release Process Testing Summary"
log "======================================="

success "âœ… Package configuration validation"
success "âœ… Version bumping functionality"
success "âœ… Changelog generation"
success "âœ… Build process"
success "âœ… Package creation"
success "âœ… CLI installation"
success "âœ… Release workflow dry run"
success "âœ… Git workflow validation"
success "âœ… Documentation build"
success "âœ… Quality checks"

log ""
success "ðŸŽ‰ All release process tests passed!"
log ""
log "ðŸ“‹ Next Steps:"
log "   1. Review and commit any changes"
log "   2. Set up GitHub secrets for automated releases:"
log "      - NPM_TOKEN for npm publishing"
log "      - GITHUB_TOKEN (automatically provided)"
log "   3. Test the GitHub Actions workflows"
log "   4. Create your first release!"
log ""
log "ðŸš€ Release Commands:"
log "   npm run release:patch    # Bug fixes"
log "   npm run release:minor    # New features"
log "   npm run release:major    # Breaking changes"
log "   git push --follow-tags   # Push release"
log ""
log "ðŸ“š Documentation:"
log "   ./scripts/deploy-docs.sh --help"
log ""
log "Test completed successfully!"